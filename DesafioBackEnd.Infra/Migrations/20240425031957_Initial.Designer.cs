// <auto-generated />
using System;
using DesafioBackEnd.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DesafioBackEnd.Infra.Migrations
{
    [DbContext(typeof(DesafioContext))]
    [Migration("20240425031957_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DesafioBackEnd.Domain.Entities.Motorcycles.Motorcycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 25, 3, 19, 57, 475, DateTimeKind.Utc).AddTicks(2010));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LicencePlate")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("LicencePlate")
                        .IsUnique();

                    b.ToTable("motorcycles", (string)null);
                });

            modelBuilder.Entity("DesafioBackEnd.Domain.Entities.Motorcycles.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 25, 3, 19, 57, 475, DateTimeKind.Utc).AddTicks(2960));

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<int?>("FineValue")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("plans", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cc89fa6-7341-4083-9901-0814f4e60e70"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Days = 7,
                            FineValue = 20,
                            IsActive = true,
                            Price = 30m
                        },
                        new
                        {
                            Id = new Guid("fbf01997-4f93-4832-bae6-043fe7d4f45e"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Days = 15,
                            FineValue = 40,
                            IsActive = true,
                            Price = 30m
                        },
                        new
                        {
                            Id = new Guid("b3a0bdb3-6694-4a55-a37b-816d2fe629f8"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Days = 30,
                            IsActive = true,
                            Price = 30m
                        },
                        new
                        {
                            Id = new Guid("10f0fa04-1724-46be-a9bc-c50f8bbf2955"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Days = 45,
                            IsActive = true,
                            Price = 30m
                        },
                        new
                        {
                            Id = new Guid("971df87c-5668-4ee3-b67a-1688421baa8b"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Days = 50,
                            IsActive = true,
                            Price = 30m
                        });
                });

            modelBuilder.Entity("DesafioBackEnd.Domain.Entities.Motorcycles.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 25, 3, 19, 57, 477, DateTimeKind.Utc).AddTicks(2810));

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EstimatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("IsActive");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("PlanId");

                    b.ToTable("rental", (string)null);
                });

            modelBuilder.Entity("DesafioBackEnd.Domain.Entities.People.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 25, 3, 19, 57, 476, DateTimeKind.Utc).AddTicks(6950));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("people", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("DesafioBackEnd.Domain.Entities.People.Admin", b =>
                {
                    b.HasBaseType("DesafioBackEnd.Domain.Entities.People.Person");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("616cf642-ea86-40d0-a2f4-28d64f521b35"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Galdalf",
                            Password = "eNi+nWQF12V2REazPSwJHgEIF8econx1akPJlg+wzYY=",
                            Permission = "ADMIN",
                            UserName = "mithrandir"
                        });
                });

            modelBuilder.Entity("DesafioBackEnd.Domain.Entities.People.Driver", b =>
                {
                    b.HasBaseType("DesafioBackEnd.Domain.Entities.People.Person");

                    b.Property<string>("CnhImage")
                        .HasColumnType("varchar");

                    b.Property<string>("CnhNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CnhType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ImageSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageType")
                        .HasColumnType("varchar(10)");

                    b.HasDiscriminator().HasValue("Driver");
                });

            modelBuilder.Entity("DesafioBackEnd.Domain.Entities.Motorcycles.Rental", b =>
                {
                    b.HasOne("DesafioBackEnd.Domain.Entities.People.Driver", "Driver")
                        .WithMany("Rentals")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DesafioBackEnd.Domain.Entities.Motorcycles.Motorcycle", "Motorcycle")
                        .WithMany("Rentals")
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DesafioBackEnd.Domain.Entities.Motorcycles.Plan", "Plan")
                        .WithMany("Rentals")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Motorcycle");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("DesafioBackEnd.Domain.Entities.People.Driver", b =>
                {
                    b.OwnsOne("DesafioBackEnd.Domain.Entities.ValueObjects.CNPJ", "Cnpj", b1 =>
                        {
                            b1.Property<Guid>("DriverId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("varchar(20)");

                            b1.HasKey("DriverId");

                            b1.ToTable("people");

                            b1.WithOwner()
                                .HasForeignKey("DriverId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();
                });

            modelBuilder.Entity("DesafioBackEnd.Domain.Entities.Motorcycles.Motorcycle", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("DesafioBackEnd.Domain.Entities.Motorcycles.Plan", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("DesafioBackEnd.Domain.Entities.People.Driver", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
